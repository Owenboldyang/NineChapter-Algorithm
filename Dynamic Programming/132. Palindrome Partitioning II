public class Solution {
    public int minCut(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        boolean[][] Palindrome = isPalindrome(s);
        int[] cut = new int[s.length() + 1];
        cut[0] = 0;
        for (int i = 1; i <= s.length(); i++) {
            cut[i] = Integer.MAX_VALUE;
            for (int j = 1; j <= i; j++) {
                if (Palindrome[i - j][i - 1] && cut[i - j] != Integer.MAX_VALUE) {
                    cut[i] = Math.min(cut[i], cut[i - j] + 1);
                }
            }
        }
        return cut[s.length()] - 1;
    }
    
    private boolean[][] isPalindrome(String s) {
        boolean[][] Palindrome = new boolean[s.length()][s.length()];
        for (int i = 0; i < s.length(); i++) {
            Palindrome[i][i] = true;
        }
        
        for (int i = 0; i < s.length() - 1; i++) {
            Palindrome[i][i + 1] = s.charAt(i) == s.charAt(i + 1);
        }
        
        for (int i = 2; i < s.length(); i++) {
            for (int start = 0; start + i < s.length(); start ++) {
                Palindrome[start][start + i] = Palindrome[start + 1][start + i - 1] 
                                               && (s.charAt(start) == s.charAt(start + i));
            }
        }
        return Palindrome;
    }
}
