public class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        helper(s, res, new ArrayList<String>(), 0);
        return res;
    }
    
    private void helper(String s, List<List<String>> res, ArrayList<String> list, int pos) {
        if (pos >= s.length()) {
            res.add(new ArrayList<String>(list));
        }
        
        for (int i = pos; i < s.length(); i++) {
            if (isPalindrome(s.substring(pos, i + 1))) {
                if (i == pos) {
                    list.add(Character.toString(s.charAt(i)));
                } else {
                    list.add(s.substring(pos, i + 1));
                }
                helper(s, res, list, i + 1);
                list.remove(list.size() - 1);
                
            }
            
        }
    }
    
    private boolean isPalindrome(String s) {
        int start = 0, end = s.length() - 1;
        while (start < end) {
            if (s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
    
}
