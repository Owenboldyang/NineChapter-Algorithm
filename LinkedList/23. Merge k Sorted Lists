public class Solution {
    private Comparator<ListNode> lisComp = new Comparator<ListNode>() {
        public int compare (ListNode o1, ListNode o2) {
            if (o1 == null) {
                return 1;
            } else if (o2 == null) {
                return -1;
            }
            
            return o1.val - o2.val;
        }
    };
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists==null || lists.length==0) {
            return null;
        }
        Queue<ListNode> heap = new PriorityQueue<>(lists.length, lisComp);
        for (int i=0; i < lists.length; i++) {
            if (lists[i] != null) {
                heap.add(lists[i]);
            }
        }
        
        ListNode dummy = new ListNode(0);
        ListNode curr = dummy;
        while (!heap.isEmpty()) {
            ListNode node = heap.poll();
            curr.next = node;
            curr = node;
            if (node.next != null) {
                heap.add(node.next);
            }
        }
        return dummy.next;
    }
}
