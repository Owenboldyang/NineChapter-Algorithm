
第四章 Permutation and Subsets (DFS，回溯法相关)

4.1 Subsets类问题模板：
    无重复元素的subsets(例如[1,2,3]):
    public void helper (ArrayList<ArrayList<Integer>> res, ArrayList<Integer> list, int[] nums, int pos) {
        res.add(new ArrayList<Integer>(list));            (pos决定下次挑元素的起始位置，因为[1,2]和[2,1]是一样的，pos可以避免出现这种重复）
        for (int i = pos; i < nums.length; i++) {
             list.add(nums[i]);
             helper(res, list, nums, i + 1);
             list.remove(list.size() - 1);
         }
     }
     
     有重复元素的subsets(例如[1,2,2]):
     Arrays.sort(nums);(先要对原数组排序，保证重复的元素位置相邻）
     public void helper (ArrayList<ArrayList<Integer>> res, ArrayList<Integer> list, int[] nums, int pos) {
        res.add(new ArrayList<Integer>(list));            (pos决定下次挑元素的起始位置，因为[1,2]和[2,1]是一样的，pos可以避免出现这种重复）
        for (int i = pos; i < nums.length; i++) {
             if (i != pos && nums[i] == nums[i - 1]) {    (i != pos是为了正常加入第一个重复的元素，即本例中的第一个2，将第二个2跳过，避免出现两次[1,2]）
                 continue;
             }
             list.add(nums[i]);
             helper(res, list, nums, i+1);
             list.remove(list.size() - 1);
         }
     }
     
     无重复元素的Permutation(例如[1,2,3]):
     public void helper (ArrayList<ArrayList<Integer>> res, ArrayList<Integer> list, int[] nums) {
        if (list.size() == nums.length) {                  (去掉pos是因为在排列组合中[1,2,3]和[3,2,1]都是答案）
            res.add(new ArrayList<Integer>(list)); 
            return;
        }
        for (int i = 0; i < nums.length; i++) {
             if (list.contains(nums[i]) {
                 continue;
             }
             list.add(nums[i]);
             helper(res, list, nums);
             list.remove(list.size() - 1);
         }
     }
     
     有重复元素的Permutation(例如[1,2,2]):
     Arrays.sort(nums);
     boolean[] visited = new boolean[nums.length];
     public void helper (ArrayList<ArrayList<Integer>> res, ArrayList<Integer> list, int[] nums, boolean[] visited) {
        if (list.size() == nums.length) {                  (去掉pos是因为在排列组合中[1,2,3]和[3,2,1]都是答案）
            res.add(new ArrayList<Integer>(list)); 
            return;
        }
        
        for (int i = 0; i < nums.length; i++) {
            if (visited[i] || i != 0 && nums[i] == nums[i - 1] && !visited[i - 1]) {
                continue;
            }
            visited[i] = true;
             list.add(nums[i]);
             helper(res, list, nums, visited);
             list.remove(list.size() - 1);
             visited[i] = false;
         }
     }
     
排列组合问题关键点：
1.Arrays.sort()去重
2.result.add()什么时候输出结果
3.if(condition) {continue} 什么时候跳过

4.2 N皇后问题
对于N皇后这样较为复杂的程序，要注意程序的模块化，不要把所有功能都写在一起。
课程中将N皇后分为四个模块:
主函数模块
public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<List<String>>();
        search(n, new ArrayList<Integer>(), res);
        return res;
    }
判定模块（判断新皇后和已有的皇后之间是否会发生冲突）
private boolean isValid(List<Integer> cols, int col) {
        int row = cols.size();
        for (int i=0; i < cols.size(); i++) {
            if (cols.get(i) == col) {
                return false;
            }
            if(i - cols.get(i) == row - col) {
                return false;
            }
            if(i + cols.get(i) == row + col) {
                return false;
            }
            
        }
        return true;
    }
 查找模块（回溯法遍历）
 public void search(int n, List<Integer> cols, List<List<String>> res) {
        if (cols.size() == n) {
            res.add(draw(cols));
            return;
        }
        
        for (int col = 0; col < n; col++) {
            if (!isValid(cols, col)) {
                continue;
            }
            cols.add(col);
            search(n, cols, res);
            cols.remove(cols.size() - 1);
        }
    }
绘图模块（画出棋盘）
    private List<String> draw(List<Integer> cols) {
        List<String> board = new ArrayList<>();
        for (int i=0; i < cols.size(); i++) {
            board.add("");
            for (int j=0; j<cols.size(); j++) {
                if (j == cols.get(i)) {
                    board.set(i, board.get(i) + "Q");
                }else {
                    board.set(i, board.get(i) + ".");
                }
            }
        }
        return board;
    } 
